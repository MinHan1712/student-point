package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FacultiesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacultiesAllPropertiesEquals(Faculties expected, Faculties actual) {
        assertFacultiesAutoGeneratedPropertiesEquals(expected, actual);
        assertFacultiesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacultiesAllUpdatablePropertiesEquals(Faculties expected, Faculties actual) {
        assertFacultiesUpdatableFieldsEquals(expected, actual);
        assertFacultiesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacultiesAutoGeneratedPropertiesEquals(Faculties expected, Faculties actual) {
        assertThat(expected)
            .as("Verify Faculties auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacultiesUpdatableFieldsEquals(Faculties expected, Faculties actual) {
        assertThat(expected)
            .as("Verify Faculties relevant properties")
            .satisfies(e -> assertThat(e.getFacultyCode()).as("check facultyCode").isEqualTo(actual.getFacultyCode()))
            .satisfies(e -> assertThat(e.getFacultyName()).as("check facultyName").isEqualTo(actual.getFacultyName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getEstablishedDate()).as("check establishedDate").isEqualTo(actual.getEstablishedDate()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getParentId()).as("check parentId").isEqualTo(actual.getParentId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacultiesUpdatableRelationshipsEquals(Faculties expected, Faculties actual) {
        assertThat(expected)
            .as("Verify Faculties relationships")
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
