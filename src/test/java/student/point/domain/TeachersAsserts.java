package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TeachersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeachersAllPropertiesEquals(Teachers expected, Teachers actual) {
        assertTeachersAutoGeneratedPropertiesEquals(expected, actual);
        assertTeachersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeachersAllUpdatablePropertiesEquals(Teachers expected, Teachers actual) {
        assertTeachersUpdatableFieldsEquals(expected, actual);
        assertTeachersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeachersAutoGeneratedPropertiesEquals(Teachers expected, Teachers actual) {
        assertThat(expected)
            .as("Verify Teachers auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeachersUpdatableFieldsEquals(Teachers expected, Teachers actual) {
        assertThat(expected)
            .as("Verify Teachers relevant properties")
            .satisfies(e -> assertThat(e.getTeachersCode()).as("check teachersCode").isEqualTo(actual.getTeachersCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getPosition()).as("check position").isEqualTo(actual.getPosition()))
            .satisfies(e -> assertThat(e.getQualification()).as("check qualification").isEqualTo(actual.getQualification()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeachersUpdatableRelationshipsEquals(Teachers expected, Teachers actual) {
        assertThat(expected)
            .as("Verify Teachers relationships")
            .satisfies(e -> assertThat(e.getFaculties()).as("check faculties").isEqualTo(actual.getFaculties()));
    }
}
