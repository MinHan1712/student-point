package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CourseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllPropertiesEquals(Course expected, Course actual) {
        assertCourseAutoGeneratedPropertiesEquals(expected, actual);
        assertCourseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllUpdatablePropertiesEquals(Course expected, Course actual) {
        assertCourseUpdatableFieldsEquals(expected, actual);
        assertCourseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAutoGeneratedPropertiesEquals(Course expected, Course actual) {
        assertThat(expected)
            .as("Verify Course auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableFieldsEquals(Course expected, Course actual) {
        assertThat(expected)
            .as("Verify Course relevant properties")
            .satisfies(e -> assertThat(e.getCourseCode()).as("check courseCode").isEqualTo(actual.getCourseCode()))
            .satisfies(e -> assertThat(e.getCourseTitle()).as("check courseTitle").isEqualTo(actual.getCourseTitle()))
            .satisfies(e -> assertThat(e.getCredits()).as("check credits").isEqualTo(actual.getCredits()))
            .satisfies(e -> assertThat(e.getLecture()).as("check lecture").isEqualTo(actual.getLecture()))
            .satisfies(e -> assertThat(e.getTutorialDiscussion()).as("check tutorialDiscussion").isEqualTo(actual.getTutorialDiscussion()))
            .satisfies(e -> assertThat(e.getPractical()).as("check practical").isEqualTo(actual.getPractical()))
            .satisfies(e -> assertThat(e.getLaboratory()).as("check laboratory").isEqualTo(actual.getLaboratory()))
            .satisfies(e -> assertThat(e.getSelfStudy()).as("check selfStudy").isEqualTo(actual.getSelfStudy()))
            .satisfies(e -> assertThat(e.getNumberOfSessions()).as("check numberOfSessions").isEqualTo(actual.getNumberOfSessions()))
            .satisfies(e -> assertThat(e.getCourseType()).as("check courseType").isEqualTo(actual.getCourseType()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSemester()).as("check semester").isEqualTo(actual.getSemester()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableRelationshipsEquals(Course expected, Course actual) {
        // empty method
    }
}
