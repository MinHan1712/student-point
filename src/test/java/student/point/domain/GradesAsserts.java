package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static student.point.domain.AssertUtils.bigDecimalCompareTo;

public class GradesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGradesAllPropertiesEquals(Grades expected, Grades actual) {
        assertGradesAutoGeneratedPropertiesEquals(expected, actual);
        assertGradesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGradesAllUpdatablePropertiesEquals(Grades expected, Grades actual) {
        assertGradesUpdatableFieldsEquals(expected, actual);
        assertGradesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGradesAutoGeneratedPropertiesEquals(Grades expected, Grades actual) {
        assertThat(expected)
            .as("Verify Grades auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGradesUpdatableFieldsEquals(Grades expected, Grades actual) {
        assertThat(expected)
            .as("Verify Grades relevant properties")
            .satisfies(e -> assertThat(e.getGradesCode()).as("check gradesCode").isEqualTo(actual.getGradesCode()))
            .satisfies(e -> assertThat(e.getCredit()).as("check credit").isEqualTo(actual.getCredit()))
            .satisfies(e -> assertThat(e.getStudyAttempt()).as("check studyAttempt").isEqualTo(actual.getStudyAttempt()))
            .satisfies(e -> assertThat(e.getExamAttempt()).as("check examAttempt").isEqualTo(actual.getExamAttempt()))
            .satisfies(e ->
                assertThat(e.getProcessScore())
                    .as("check processScore")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getProcessScore())
            )
            .satisfies(e ->
                assertThat(e.getExamScore()).as("check examScore").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getExamScore())
            )
            .satisfies(e ->
                assertThat(e.getScore10()).as("check score10").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getScore10())
            )
            .satisfies(e -> assertThat(e.getScore4()).as("check score4").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getScore4()))
            .satisfies(e -> assertThat(e.getLetterGrade()).as("check letterGrade").isEqualTo(actual.getLetterGrade()))
            .satisfies(e -> assertThat(e.getEvaluation()).as("check evaluation").isEqualTo(actual.getEvaluation()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGradesUpdatableRelationshipsEquals(Grades expected, Grades actual) {
        assertThat(expected)
            .as("Verify Grades relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getClasses()).as("check classes").isEqualTo(actual.getClasses()));
    }
}
