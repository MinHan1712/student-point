package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClassRegistrationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassRegistrationAllPropertiesEquals(ClassRegistration expected, ClassRegistration actual) {
        assertClassRegistrationAutoGeneratedPropertiesEquals(expected, actual);
        assertClassRegistrationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassRegistrationAllUpdatablePropertiesEquals(ClassRegistration expected, ClassRegistration actual) {
        assertClassRegistrationUpdatableFieldsEquals(expected, actual);
        assertClassRegistrationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassRegistrationAutoGeneratedPropertiesEquals(ClassRegistration expected, ClassRegistration actual) {
        assertThat(expected)
            .as("Verify ClassRegistration auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassRegistrationUpdatableFieldsEquals(ClassRegistration expected, ClassRegistration actual) {
        assertThat(expected)
            .as("Verify ClassRegistration relevant properties")
            .satisfies(e -> assertThat(e.getRegisterDate()).as("check registerDate").isEqualTo(actual.getRegisterDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassRegistrationUpdatableRelationshipsEquals(ClassRegistration expected, ClassRegistration actual) {
        assertThat(expected)
            .as("Verify ClassRegistration relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getClasses()).as("check classes").isEqualTo(actual.getClasses()));
    }
}
