package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConductScoresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConductScoresAllPropertiesEquals(ConductScores expected, ConductScores actual) {
        assertConductScoresAutoGeneratedPropertiesEquals(expected, actual);
        assertConductScoresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConductScoresAllUpdatablePropertiesEquals(ConductScores expected, ConductScores actual) {
        assertConductScoresUpdatableFieldsEquals(expected, actual);
        assertConductScoresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConductScoresAutoGeneratedPropertiesEquals(ConductScores expected, ConductScores actual) {
        assertThat(expected)
            .as("Verify ConductScores auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConductScoresUpdatableFieldsEquals(ConductScores expected, ConductScores actual) {
        assertThat(expected)
            .as("Verify ConductScores relevant properties")
            .satisfies(e -> assertThat(e.getConductScoresCode()).as("check conductScoresCode").isEqualTo(actual.getConductScoresCode()))
            .satisfies(e -> assertThat(e.getAcademicYear()).as("check academicYear").isEqualTo(actual.getAcademicYear()))
            .satisfies(e -> assertThat(e.getScore()).as("check score").isEqualTo(actual.getScore()))
            .satisfies(e -> assertThat(e.getClassification()).as("check classification").isEqualTo(actual.getClassification()))
            .satisfies(e -> assertThat(e.getEvaluation()).as("check evaluation").isEqualTo(actual.getEvaluation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConductScoresUpdatableRelationshipsEquals(ConductScores expected, ConductScores actual) {
        assertThat(expected)
            .as("Verify ConductScores relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()));
    }
}
