package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClassesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAllPropertiesEquals(Classes expected, Classes actual) {
        assertClassesAutoGeneratedPropertiesEquals(expected, actual);
        assertClassesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAllUpdatablePropertiesEquals(Classes expected, Classes actual) {
        assertClassesUpdatableFieldsEquals(expected, actual);
        assertClassesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesAutoGeneratedPropertiesEquals(Classes expected, Classes actual) {
        assertThat(expected)
            .as("Verify Classes auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesUpdatableFieldsEquals(Classes expected, Classes actual) {
        assertThat(expected)
            .as("Verify Classes relevant properties")
            .satisfies(e -> assertThat(e.getClassCode()).as("check classCode").isEqualTo(actual.getClassCode()))
            .satisfies(e -> assertThat(e.getClassName()).as("check className").isEqualTo(actual.getClassName()))
            .satisfies(e -> assertThat(e.getClassroom()).as("check classroom").isEqualTo(actual.getClassroom()))
            .satisfies(e -> assertThat(e.getCredits()).as("check credits").isEqualTo(actual.getCredits()))
            .satisfies(e -> assertThat(e.getNumberOfSessions()).as("check numberOfSessions").isEqualTo(actual.getNumberOfSessions()))
            .satisfies(e ->
                assertThat(e.getTotalNumberOfStudents()).as("check totalNumberOfStudents").isEqualTo(actual.getTotalNumberOfStudents())
            )
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getClassType()).as("check classType").isEqualTo(actual.getClassType()))
            .satisfies(e -> assertThat(e.getDeliveryMode()).as("check deliveryMode").isEqualTo(actual.getDeliveryMode()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getAcademicYear()).as("check academicYear").isEqualTo(actual.getAcademicYear()))
            .satisfies(e -> assertThat(e.getParentId()).as("check parentId").isEqualTo(actual.getParentId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassesUpdatableRelationshipsEquals(Classes expected, Classes actual) {
        assertThat(expected)
            .as("Verify Classes relationships")
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()))
            .satisfies(e -> assertThat(e.getTeachers()).as("check teachers").isEqualTo(actual.getTeachers()));
    }
}
