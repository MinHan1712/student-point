package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static student.point.domain.AssertUtils.bigDecimalCompareTo;

public class StatisticsDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsDetailsAllPropertiesEquals(StatisticsDetails expected, StatisticsDetails actual) {
        assertStatisticsDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertStatisticsDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsDetailsAllUpdatablePropertiesEquals(StatisticsDetails expected, StatisticsDetails actual) {
        assertStatisticsDetailsUpdatableFieldsEquals(expected, actual);
        assertStatisticsDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsDetailsAutoGeneratedPropertiesEquals(StatisticsDetails expected, StatisticsDetails actual) {
        assertThat(expected)
            .as("Verify StatisticsDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsDetailsUpdatableFieldsEquals(StatisticsDetails expected, StatisticsDetails actual) {
        assertThat(expected)
            .as("Verify StatisticsDetails relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e ->
                assertThat(e.getTotalScholarship())
                    .as("check totalScholarship")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalScholarship())
            )
            .satisfies(e -> assertThat(e.getGraduationDate()).as("check graduationDate").isEqualTo(actual.getGraduationDate()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsDetailsUpdatableRelationshipsEquals(StatisticsDetails expected, StatisticsDetails actual) {
        assertThat(expected)
            .as("Verify StatisticsDetails relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getStatistics()).as("check statistics").isEqualTo(actual.getStatistics()));
    }
}
