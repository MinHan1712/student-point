package student.point.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StatisticsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsAllPropertiesEquals(Statistics expected, Statistics actual) {
        assertStatisticsAutoGeneratedPropertiesEquals(expected, actual);
        assertStatisticsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsAllUpdatablePropertiesEquals(Statistics expected, Statistics actual) {
        assertStatisticsUpdatableFieldsEquals(expected, actual);
        assertStatisticsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsAutoGeneratedPropertiesEquals(Statistics expected, Statistics actual) {
        assertThat(expected)
            .as("Verify Statistics auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsUpdatableFieldsEquals(Statistics expected, Statistics actual) {
        assertThat(expected)
            .as("Verify Statistics relevant properties")
            .satisfies(e -> assertThat(e.getStatisticsCode()).as("check statisticsCode").isEqualTo(actual.getStatisticsCode()))
            .satisfies(e -> assertThat(e.getAcademicYear()).as("check academicYear").isEqualTo(actual.getAcademicYear()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticsUpdatableRelationshipsEquals(Statistics expected, Statistics actual) {
        // empty method
    }
}
